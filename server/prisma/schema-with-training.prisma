// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  azureId           String              @unique
  email             String              @unique
  firstName         String?
  lastName          String?
  credits           Int                 @default(0)
  subscription      Subscription?
  organization      Organization?
  jobs              Job[]
  transactions      Transaction[]
  auditLogs         AuditLog[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Subscription {
  id                Int                 @id @default(autoincrement())
  userId            Int                 @unique
  user              User                @relation(fields: [userId], references: [id])
  plan              String              // 'basic', 'professional', 'enterprise'
  modelQuota        Int                 @default(0) // Number of custom models allowed
  modelsUsed        Int                 @default(0)
  monthlyPrice      Float
  isActive          Boolean             @default(true)
  expiresAt         DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Organization {
  id                Int                 @id @default(autoincrement())
  name              String
  userId            Int                 @unique
  user              User                @relation(fields: [userId], references: [id])
  customModels      CustomModel[]
  trainingProjects  TrainingProject[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model CustomModel {
  id                String              @id @default(uuid())
  organizationId    Int
  organization      Organization        @relation(fields: [organizationId], references: [id])
  name              String
  azureModelId      String              @unique
  description       String?
  modelType         String              @default("template") // 'template' or 'neural'
  status            String              @default("active") // 'training', 'active', 'failed', 'archived'
  isActive          Boolean             @default(true)
  trainingProjectId String?             @unique
  trainingProject   TrainingProject?    @relation(fields: [trainingProjectId], references: [id])
  jobs              Job[]
  metadata          Json?               // Store field mappings, confidence thresholds, etc.
  trainingMetrics   Json?               // Store accuracy, precision, recall, etc.
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model TrainingProject {
  id                String              @id @default(uuid())
  organizationId    Int
  organization      Organization        @relation(fields: [organizationId], references: [id])
  name              String
  description       String?
  status            String              @default("setup") // 'setup', 'labeling', 'training', 'completed', 'failed'
  documentType      String              // Type of documents (invoice, receipt, form, etc.)
  modelType         String              @default("template") // 'template' or 'neural'
  customModel       CustomModel?
  trainingDocuments TrainingDocument[]
  labelingSchema    Json?               // Define what fields to extract
  azureStorageUrl   String?             // Blob storage container URL
  trainingStartedAt DateTime?
  trainingCompletedAt DateTime?
  errorMessage      String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model TrainingDocument {
  id                String              @id @default(uuid())
  projectId         String
  project           TrainingProject     @relation(fields: [projectId], references: [id])
  fileName          String
  fileUrl           String              // Azure Blob Storage URL
  fileSize          Int
  pageCount         Int                 @default(1)
  status            String              @default("uploaded") // 'uploaded', 'labeling', 'labeled', 'error'
  labels            DocumentLabel[]
  uploadedAt        DateTime            @default(now())
  labeledAt         DateTime?
  labeledBy         String?             // User ID who labeled
}

model DocumentLabel {
  id                String              @id @default(uuid())
  documentId        String
  document          TrainingDocument    @relation(fields: [documentId], references: [id])
  fieldName         String              // e.g., 'InvoiceNumber', 'CustomerName'
  fieldType         String              // 'string', 'number', 'date', 'address', 'table'
  pageNumber        Int                 @default(1)
  boundingBox       Json                // [x1, y1, x2, y2, x3, y3, x4, y4] coordinates
  value             String              // The extracted/labeled value
  confidence        Float?              // Confidence score if auto-labeled
  isManuallyLabeled Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@index([documentId, fieldName])
}

model Job {
  id                String              @id @default(uuid())
  userId            Int
  user              User                @relation(fields: [userId], references: [id])
  fileName          String
  fileUrl           String?
  status            String              @default("pending")
  customModelId     String?
  customModel       CustomModel?        @relation(fields: [customModelId], references: [id])
  pageCount         Int                 @default(1)
  creditsUsed       Int                 @default(1)
  extractedData     Json?
  confidence        Float?
  processingTime    Int?                // milliseconds
  error             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Transaction {
  id                String              @id @default(uuid())
  userId            Int
  user              User                @relation(fields: [userId], references: [id])
  type              String              // 'credit_purchase', 'subscription', 'model_training'
  amount            Float
  credits           Int?
  status            String              @default("pending")
  stripeSessionId   String?
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model AuditLog {
  id                String              @id @default(uuid())
  userId            Int
  user              User                @relation(fields: [userId], references: [id])
  action            String
  entityType        String
  entityId          String
  metadata          Json?
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime            @default(now())
}