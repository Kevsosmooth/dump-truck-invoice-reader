generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String?
  googleId           String?             @unique
  azureId            String?             @unique
  firstName          String?
  lastName           String?
  profilePicture     String?
  role               UserRole            @default(USER)
  isActive           Boolean             @default(true)
  credits            Int                 @default(0)
  lastLoginAt        DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  auditLogs          AuditLog[]
  jobs               Job[]
  organization       Organization?
  processingSessions ProcessingSession[]
  sessions           Session[]
  transactions       Transaction[]
  modelConfigurations ModelConfiguration[]
  modelAccess        ModelAccess[]
  grantedAccess      ModelAccess[]       @relation("GrantedBy")
}

model Session {
  id        String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@index([token])
}

model Organization {
  id           Int           @id @default(autoincrement())
  name         String
  userId       Int           @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  customModels CustomModel[]
  user         User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modelAccess  ModelAccess[]
}

model CustomModel {
  id             String       @id @default(dbgenerated("(gen_random_uuid())::text"))
  organizationId Int
  name           String
  azureModelId   String
  description    String?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Job {
  id               String             @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId           Int
  sessionId        String?
  status           JobStatus          @default(QUEUED)
  fileName         String
  originalFileUrl  String?
  processedFileUrl String?
  resultFileUrl    String?
  fileSize         Int
  pageCount        Int                @default(0)
  pagesProcessed   Int                @default(0)
  creditsUsed      Int                @default(0)
  modelId          String?            // Azure model ID
  modelConfigId    String?            // Model configuration ID for defaults
  error            String?
  metadata         Json?
  queueJobId       String?
  operationId      String?
  operationStatus  String?
  splitPageNumber  Int?
  parentJobId      String?
  extractedFields  Json?
  newFileName      String?
  pollingStartedAt DateTime?
  lastPolledAt     DateTime?
  blobUrl          String?
  sasUrl           String?
  sasExpiresAt     DateTime?
  createdAt        DateTime           @default(now())
  completedAt      DateTime?
  expiresAt        DateTime?
  fileAccessLogs   FileAccessLog[]
  parentJob        Job?               @relation("ParentChild", fields: [parentJobId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childJobs        Job[]              @relation("ParentChild")
  session          ProcessingSession? @relation(fields: [sessionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modelConfig      ModelConfiguration? @relation(fields: [modelConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([sessionId])
  @@index([operationId])
  @@index([parentJobId])
  @@index([modelConfigId])
}

model ProcessingSession {
  id             String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId         Int
  totalFiles     Int           @default(0)
  totalPages     Int           @default(0)
  processedPages Int           @default(0)
  status         SessionStatus @default(UPLOADING)
  blobPrefix     String
  modelId        String?
  zipUrl         String?
  excelUrl       String?
  postProcessingStatus String?
  postProcessingStartedAt DateTime?
  postProcessingCompletedAt DateTime?
  postProcessedCount Int     @default(0)
  createdAt      DateTime      @default(now())
  expiresAt      DateTime
  jobs           Job[]
  user           User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
}

model Transaction {
  id                    String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId                Int
  type                  TransactionType
  amount                Int
  credits               Int
  stripePaymentIntentId String?           @unique
  status                TransactionStatus @default(PENDING)
  description           String?
  metadata              Json?
  createdAt             DateTime          @default(now())
  user                  User              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model AuditLog {
  id                 String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId             Int?
  eventType          String
  eventData          Json
  ipAddress          String?
  userAgent          String?
  azureCorrelationId String?
  createdAt          DateTime @default(now())
  user               User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([eventType])
  @@index([userId])
  @@index([createdAt])
}

model FileAccessLog {
  id             String         @id @default(dbgenerated("(gen_random_uuid())::text"))
  jobId          String
  accessType     FileAccessType
  ipAddress      String?
  userAgent      String?
  sasTokenExpiry DateTime?
  createdAt      DateTime       @default(now())
  job            Job            @relation(fields: [jobId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([jobId])
}

model CleanupLog {
  id                String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  startedAt         DateTime
  completedAt       DateTime
  sessionsProcessed Int           @default(0)
  sessionsExpired   Int           @default(0)
  jobsExpired       Int           @default(0)
  blobsDeleted      Int           @default(0)
  errors            String?
  status            CleanupStatus @default(RUNNING)
  createdAt         DateTime      @default(now())

  @@index([status])
  @@index([startedAt])
}

model ModelConfiguration {
  id               String               @id @default(dbgenerated("(gen_random_uuid())::text"))
  azureModelId     String               @unique
  displayName      String
  description      String?
  isActive         Boolean              @default(true)
  createdBy        Int
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @default(now()) @updatedAt
  creator          User                 @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fieldConfigs     FieldConfiguration[]
  modelAccess      ModelAccess[]
  jobs             Job[]
  
  @@index([azureModelId])
  @@index([createdBy])
  @@index([isActive])
}

model FieldConfiguration {
  id                String               @id @default(dbgenerated("(gen_random_uuid())::text"))
  modelConfigId     String
  fieldName         String               // Azure field name
  displayName       String               // User-friendly display name
  fieldType         FieldType            @default(TEXT)
  isEnabled         Boolean              @default(true)
  isRequired        Boolean              @default(false)
  defaultValue      String?
  defaultType       FieldDefaultType     @default(EMPTY)
  fieldOrder        Int                  @default(0)
  validation        Json?                // Optional validation rules
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @default(now()) @updatedAt
  modelConfig       ModelConfiguration   @relation(fields: [modelConfigId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  @@unique([modelConfigId, fieldName])
  @@index([modelConfigId])
}

model ModelAccess {
  id              String             @id @default(dbgenerated("(gen_random_uuid())::text"))
  modelConfigId   String
  userId          Int
  customName      String?            // User-specific display name override
  isActive        Boolean            @default(true)
  grantedAt       DateTime           @default(now())
  grantedBy       Int?               // Admin who granted access
  expiresAt       DateTime?          // Optional expiration date
  modelConfig     ModelConfiguration @relation(fields: [modelConfigId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  grantedByUser   User?              @relation("GrantedBy", fields: [grantedBy], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  @@unique([modelConfigId, userId])
  @@index([modelConfigId])
  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
}

enum FieldType {
  TEXT
  DATE
  NUMBER
  CURRENCY
  BOOLEAN
}

enum FieldDefaultType {
  STATIC
  TODAY
  CURRENT_USER
  ORGANIZATION
  EMPTY
  CALCULATED
}

enum UserRole {
  USER
  ADMIN
}

enum JobStatus {
  QUEUED
  UPLOADING
  PROCESSING
  POLLING
  COMPLETED
  FAILED
  EXPIRED
  CANCELLED
}

enum SessionStatus {
  ACTIVE
  UPLOADING
  PROCESSING
  POST_PROCESSING
  COMPLETED
  FAILED
  EXPIRED
  CANCELLED
}

enum TransactionType {
  PURCHASE
  USAGE
  REFUND
  ADMIN_CREDIT
  ADMIN_DEBIT
  BONUS
  MANUAL_ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum FileAccessType {
  DOWNLOAD
  DELETE
  EXPIRE
  VIEW
}

enum CleanupStatus {
  RUNNING
  COMPLETED
  COMPLETED_WITH_ERRORS
  FAILED
}
