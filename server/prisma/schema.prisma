generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  password            String?
  googleId            String?               @unique
  azureId             String?               @unique
  firstName           String?
  lastName            String?
  profilePicture      String?
  role                UserRole              @default(USER)
  isActive            Boolean               @default(true)
  credits             Int                   @default(0)
  lastLoginAt         DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  organizationId      Int?
  auditLogs           AuditLog[]
  jobs                Job[]
  modelAccessGranted  ModelAccess[]         @relation("ModelAccessGrantedBy")
  modelAccess         ModelAccess[]         @relation("ModelAccessUser")
  modelConfigurations ModelConfiguration[]
  organization        Organization?
  PaymentMethod       PaymentMethod[]
  processingSessions  ProcessingSession[]
  sessions            Session[]
  transactions        Transaction[]
  extractionAnalytics ExtractionAnalytics[]
}

model Session {
  id        String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Organization {
  id           Int           @id @default(autoincrement())
  name         String
  userId       Int           @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  customModels CustomModel[]
  user         User          @relation(fields: [userId], references: [id])
}

model CustomModel {
  id                  String                @id
  organizationId      Int
  name                String
  azureModelId        String
  description         String?
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  // Analytics fields
  totalExtractions    Int                   @default(0)
  avgConfidenceScore  Float                 @default(0)
  lastUsedAt          DateTime?
  organization        Organization          @relation(fields: [organizationId], references: [id])
  extractionAnalytics ExtractionAnalytics[]
}

model Job {
  id                   String              @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId               Int
  status               JobStatus           @default(QUEUED)
  fileName             String
  originalFileUrl      String?
  processedFileUrl     String?
  resultFileUrl        String?
  fileSize             Int
  pageCount            Int                 @default(0)
  pagesProcessed       Int                 @default(0)
  creditsUsed          Int                 @default(0)
  modelId              String?
  error                String?
  metadata             Json?
  queueJobId           String?
  createdAt            DateTime            @default(now())
  completedAt          DateTime?
  expiresAt            DateTime?
  blobUrl              String?
  extractedFields      Json?
  lastPolledAt         DateTime?
  newFileName          String?
  operationId          String?
  operationStatus      String?
  parentJobId          String?
  pollingStartedAt     DateTime?
  sasExpiresAt         DateTime?
  sasUrl               String?
  sessionId            String?
  splitPageNumber      Int?
  modelConfigId        String?
  // Analytics fields
  processingStartTime  DateTime?
  processingEndTime    DateTime?
  confidenceScores     Json?               // { "fieldName": confidenceValue }
  extractedFieldsCount Int                 @default(0)
  avgConfidence        Float?              // Average confidence across all fields
  fileAccessLogs       FileAccessLog[]
  extractionAnalytics  ExtractionAnalytics[]
  modelConfig          ModelConfiguration? @relation(fields: [modelConfigId], references: [id])
  parentJob            Job?                @relation("ParentChild", fields: [parentJobId], references: [id])
  childJobs            Job[]               @relation("ParentChild")
  session              ProcessingSession?  @relation(fields: [sessionId], references: [id])
  user                 User                @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([operationId])
  @@index([parentJobId])
  @@index([modelConfigId])
  @@index([processingStartTime])
  @@index([status, createdAt])
}

model ProcessingSession {
  id                        String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId                    Int
  totalFiles                Int           @default(0)
  totalPages                Int           @default(0)
  processedPages            Int           @default(0)
  status                    SessionStatus @default(UPLOADING)
  blobPrefix                String
  modelId                   String?
  zipUrl                    String?
  excelUrl                  String?
  createdAt                 DateTime      @default(now())
  expiresAt                 DateTime
  postProcessingStatus      String?
  postProcessingStartedAt   DateTime?
  postProcessingCompletedAt DateTime?
  postProcessedCount        Int           @default(0)
  jobs                      Job[]
  user                      User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
}

model Transaction {
  id                    String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId                Int
  type                  TransactionType
  amount                Int
  credits               Int
  stripePaymentIntentId String?           @unique
  stripeInvoiceId       String?           @unique
  packageId             String?
  paymentMethodId       String?
  ipAddress             String?
  userAgent             String?
  status                TransactionStatus @default(PENDING)
  description           String?
  metadata              Json?
  createdAt             DateTime          @default(now())
  CreditPackage         CreditPackage?    @relation(fields: [packageId], references: [id], onUpdate: NoAction)
  PaymentMethod         PaymentMethod?    @relation(fields: [paymentMethodId], references: [id], onUpdate: NoAction)
  user                  User              @relation(fields: [userId], references: [id])

  @@index([ipAddress])
  @@index([packageId])
  @@index([paymentMethodId])
}

model AuditLog {
  id                 String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId             Int?
  eventType          String
  eventData          Json
  ipAddress          String?
  userAgent          String?
  azureCorrelationId String?
  createdAt          DateTime @default(now())
  user               User?    @relation(fields: [userId], references: [id])

  @@index([eventType])
  @@index([userId])
  @@index([createdAt])
}

model FileAccessLog {
  id             String         @id @default(dbgenerated("(gen_random_uuid())::text"))
  jobId          String
  accessType     FileAccessType
  ipAddress      String?
  userAgent      String?
  sasTokenExpiry DateTime?
  createdAt      DateTime       @default(now())
  job            Job            @relation(fields: [jobId], references: [id])

  @@index([jobId])
}

model CleanupLog {
  id                String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  startedAt         DateTime
  completedAt       DateTime
  sessionsProcessed Int           @default(0)
  sessionsExpired   Int           @default(0)
  jobsExpired       Int           @default(0)
  blobsDeleted      Int           @default(0)
  errors            String?
  status            CleanupStatus @default(RUNNING)
  createdAt         DateTime      @default(now())

  @@index([status])
  @@index([startedAt])
}

model ModelConfiguration {
  id                 String               @id @default(dbgenerated("(gen_random_uuid())::text"))
  azureModelId       String
  displayName        String
  description        String?
  isActive           Boolean              @default(true)
  isPublic           Boolean              @default(false)
  createdBy          Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  fileNamingTemplate String?              @default("{company}_{ticket}_{date}")
  fileNamingFields   Json?
  excelColumnOrder   Json?
  excelColumnConfig  Json?
  fileNamingElements Json?
  fieldConfigs       FieldConfiguration[]
  jobs               Job[]
  modelAccess        ModelAccess[]
  creator            User                 @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([azureModelId, createdBy])
  @@index([azureModelId])
  @@index([createdBy])
  @@index([isPublic])
}

model FieldConfiguration {
  id                   String             @id @default(dbgenerated("(gen_random_uuid())::text"))
  modelConfigId        String
  fieldName            String
  displayName          String
  fieldType            FieldType          @default(TEXT)
  isEnabled            Boolean            @default(true)
  isRequired           Boolean            @default(false)
  defaultValue         String?
  defaultType          FieldDefaultType   @default(EMPTY)
  fieldOrder           Int                @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
  validation           Json?
  transformationType   TransformationType @default(NONE)
  transformationConfig Json?
  modelConfig          ModelConfiguration @relation(fields: [modelConfigId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([modelConfigId, fieldName], map: "FieldConfiguration_modelConfigId_azureFieldName_key")
  @@index([modelConfigId])
}

model ModelAccess {
  id            String             @id @default(dbgenerated("(gen_random_uuid())::text"))
  modelConfigId String
  userId        Int
  grantedBy     Int?
  grantedAt     DateTime           @default(now())
  expiresAt     DateTime?
  isActive      Boolean            @default(true)
  customName    String?
  grantedByUser User?              @relation("ModelAccessGrantedBy", fields: [grantedBy], references: [id], onUpdate: NoAction)
  modelConfig   ModelConfiguration @relation(fields: [modelConfigId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          User               @relation("ModelAccessUser", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([modelConfigId, userId])
  @@index([modelConfigId])
  @@index([userId])
  @@index([expiresAt])
  @@index([grantedBy])
}

model CreditPackage {
  id              String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  stripeProductId String?       @unique
  stripePriceId   String?       @unique
  name            String
  description     String?
  credits         Int
  price           Int
  isActive        Boolean       @default(true)
  displayOrder    Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  Transaction     Transaction[]

  @@index([displayOrder])
  @@index([isActive])
}

model PaymentMethod {
  id                    String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId                Int
  stripePaymentMethodId String        @unique
  type                  String
  last4                 String
  brand                 String?
  expiryMonth           Int?
  expiryYear            Int?
  isDefault             Boolean       @default(false)
  createdAt             DateTime      @default(now())
  User                  User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Transaction           Transaction[]

  @@index([isDefault])
  @@index([userId])
}

model ExtractionAnalytics {
  id               String      @id @default(dbgenerated("(gen_random_uuid())::text"))
  modelId          String
  modelConfigId    String?
  fieldName        String
  confidenceScore  Float
  extractionDate   DateTime    @default(now())
  userId           Int
  jobId            String
  
  model            CustomModel @relation(fields: [modelId], references: [id])
  user             User        @relation(fields: [userId], references: [id])
  job              Job         @relation(fields: [jobId], references: [id])
  
  @@index([modelId, extractionDate])
  @@index([fieldName, extractionDate])
  @@index([userId, extractionDate])
  @@index([jobId])
}

enum FieldType {
  TEXT
  DATE
  NUMBER
  CURRENCY
  BOOLEAN
}

enum FieldDefaultType {
  STATIC
  TODAY
  CURRENT_USER
  ORGANIZATION
  EMPTY
}

enum TransformationType {
  NONE
  DATE_PARSE
  NUMBER_FORMAT
  TEXT_REPLACE
  CUSTOM
}

enum UserRole {
  USER
  ADMIN
}

enum JobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
  UPLOADING
  POLLING
  CANCELLED
}

enum SessionStatus {
  ACTIVE
  UPLOADING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
  CANCELLED
  POST_PROCESSING
}

enum TransactionType {
  PURCHASE
  USAGE
  REFUND
  ADMIN_CREDIT
  ADMIN_DEBIT
  BONUS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum FileAccessType {
  DOWNLOAD
  DELETE
  EXPIRE
  VIEW
}

enum CleanupStatus {
  RUNNING
  COMPLETED
  COMPLETED_WITH_ERRORS
  FAILED
}
